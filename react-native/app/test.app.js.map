{"version":3,"sources":["test/app.cljs"],"mappings":";AAYA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AAErB,AAAKC,AA2BK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACD,AAACC;AAGX,AAAA,AAAAP,AAAAC,AAAAO;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAIpB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACMC,AAAgB,AAAaP,AAC5BQ,AAAgB,AAASR;AAFhC,AAG2B,AAAA,AAAA,AAACS,AAAML,AAAUM,AAAoBC;AAHhE,AAAA,AAAA,AAAA,AAAA,AAAA,AAMOC;AANP,AAMuC,AAAA,AAAA,AAAA,AAACH,AAAML,AAAUS;AANxD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOQC,AAAkBhB,AAEnBU,AAAgB,AAAQR,AAGxBQ,AAAgB,AAAQR,AAGxBO,AAAgB,AAAmBP,AAClCO,AAAgB,AAAYP,AAC3Be;AAjBT,AAkB+B,AAAA,AAAA,AAAA,AAACN,AAAML,AAAUS;AAlBhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAmBQN,AAAgB,AAAYP,AAC3Be;AApBT,AAqB+B,AAAA,AAAA,AAAA,AAACN,AAAML,AAAUS;AArBhD,AAAA,AAAA,AAAA,AAAA,AAuBOL,AAAgB,AAAQR,AAChB,AAAA,AAAA,AAAAgB,AAAUZ;;AAEzB,AAAA,AAAMa;AAAN,AAGE,AAAA,AAACC,AAA6B,AAAA,AAACC,AAAcb;;AAE/C,AAAA,AAAMc;AAAN,AACE,AAACH","names":["js/test","js/test.app","js/test.app.splash-img","test.app/splash-img","js/require","test.app/styles","cljs.core/clj->js","js/shadow.js.shim.module$react_native.StyleSheet.create","js/test.app.app-state","test.app/app-state","reagent.core.atom","test.app/root","js/shadow.js.shim.module$react_native.View","js/shadow.js.shim.module$react_native.Text","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/inc","js/shadow.js.shim.module$react_native.TouchableOpacity","cljs.core/assoc-in","js/shadow.js.shim.module$react_native.Image","js/shadow.js.shim.module$react_native.Button","cljs.core/deref","test.app/start","shadow.react-native/render-root","reagent.core/as-element","test.app/init"],"sourcesContent":["(ns test.app\n  (:require\n    [shadow.react-native :refer (render-root)]\n    [\"react-native\" :as rn]\n    [\"react\" :as react]\n    [reagent.core :as r]\n    ))\n\n;; must use defonce and must refresh full app so metro can fill these in\n;; at live-reload time `require` does not exist and will cause errors\n;; must use path relative to :output-dir\n\n(defonce splash-img (js/require \"../assets/shadow-cljs.png\"))\n\n(def styles\n  ^js (-> {:container\n           {:flex 1\n            :backgroundColor \"#fff\"\n            :alignItems \"center\"\n            :justifyContent \"center\"}\n\n           :title\n           {;; :fontWeight \"bold\"\n            :fontSize 36\n            :color \"blue\"}\n\n           :body\n           {:fontSize 24\n            :color \"blue\"\n            :textAlign \"center\"\n            :margin 10}\n\n           :buttonContainer\n           {:margin 10\n            :flexDirection \"row\"\n            :justifyContent \"space-between\"\n            :alignItems \"center\"}\n\n           :mybutton\n           {:margin 10\n            :padding 10}}\n          (clj->js)\n          (rn/StyleSheet.create)))\n\n\n(defonce app-state (r/atom {:title \"Shopping List\"\n                            :answer \"\"}))\n\n\n(defn root []\n  [:> rn/View {:style (.-container styles)}\n   [:> rn/Text {:style (.-title styles)\n                :on-press #(swap! app-state update-in [:answer] inc)}\n    \"Hello world!\\n\"]\n\n   [:> rn/TouchableOpacity {:on-press #(swap! app-state assoc-in [:answer] \"foobat\")}\n    [:> rn/Image {:source splash-img :style {:width 150 :height 150}}]]\n\n   [:> rn/Text {:style (.-body styles)}\n    \"\\nThis looks like the beginnings of great app!\"]\n\n   [:> rn/Text {:style (.-body styles)}\n    \"What do you think?\"]\n\n   [:> rn/View {:style (.-buttonContainer styles)}\n    [:> rn/View {:style (.-mybutton styles)}\n     [:> rn/Button {:title \"Yes\"\n                    :on-press #(swap! app-state assoc-in [:answer] \"yes\")}]]\n    [:> rn/View {:style (.-mybutton styles)}\n     [:> rn/Button {:title \"No\"\n                    :on-press #(swap! app-state assoc-in [:answer] \"no\")}]]]\n\n   [:> rn/Text {:style (.-body styles)}\n    \"Answer: \" (:answer @app-state)]])\n   \n(defn start\n  {:dev/after-load true}\n  []\n  (render-root \"shadow_android\" (r/as-element [root])))\n\n(defn init []\n  (start))\n"]}