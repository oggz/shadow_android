{"version":3,"sources":["shadow/cljs/devtools/client/react_native.cljs"],"mappings":";AAQA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAMC;AAAN,AACE,AAACC,AAAeF;;AADlB;;;;AAFH,AAAA,AAAA,AAAMF,AAIFE,AAAEG;AAJN,AAKG,AAAMF;AAAN,AACE,AAACC,AAAeF,AAAEG;;AADpB;;;;AALH,AAAA,AAAA,AAAML;;AAAN,AAQA,AAAA,AAAMM,AAAaC;AAAnB,AACE,AAACC,AAAoBD;;AAEvB,AAAA,AAAME,AAAYC;AAAlB,AACE,AAAAC,AAAA,AAAAC,AAA2CF;AAA3CG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAsCgB;AAAtC,AAAAZ,AAAAJ,AAAA,AAAgBc;AAAhB,AAAAV,AAAAJ,AAAA,AAA8Be;AAA9B,AAAA,AACE,AAAA,AAACE,AAAuBH;;AACxB,AAACI,AAAoBF;;AACrB,AAAC1B,AAAY,AAAA,AAAKyB,AAAsBD;;AAH1C;AAAA,AAAAnB;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAM,AAAA,AAAAT,AAAAD;AAAA,AAAA,AAAAU;AAAA,AAAA,AAAAV,AAAAU;AAAA,AAAA,AAAA,AAAAC,AAAAX;AAAA,AAAAY,AAAA,AAAAC,AAAAb;AAAA,AAAA,AAAA,AAAAc,AAAAd;AAAAY;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAjB;AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAAA,AAAsCK;AAAtC,AAAAZ,AAAAO,AAAA,AAAgBG;AAAhB,AAAAV,AAAAO,AAAA,AAA8BI;AAA9B,AAAA,AACE,AAAA,AAACE,AAAuBH;;AACxB,AAACI,AAAoBF;;AACrB,AAAC1B,AAAY,AAAA,AAAKyB,AAAsBD;;AAH1C;AAAA,AAAA,AAAAD,AAAAlB;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAKF,AAAA,AAAMwB,AAAcC,AAAI1B,AAAQ2B;AAAhC,AACE,AAACC,AACC,AAAA,AAACC,AAAMH,AAEL,AAAKI;AAAL,AACE,AAACP,AAAa,AAAA,AAAsBO;AAHxC,AAKE,AAAKA;AAAL,AACE,AAACP,AAAa,AAAA,AAAmBO;AANrC,AAQE,AAAKA;AAAL,AACE,AAACP,AAAa,AAAA,AAAaO;AAVjC;AAAA,AAWG,AAAC/B,AAAWC;AACb2B;;AAEJ,AAAA,AAAA,AAAAvC,AAAMgD;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAQG;AAAd,AAAA;;;AAAA,AAAA,AAAA,AAAMH;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAApC,AAAAmC;;;AAAA,AAEA,AAAA,AAAAG,AAAME,AAAuBC;AAA7B,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlC,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAAC,AAAAgC,AAAAA;AAAAA,AAAmEf;AAAnE,AAAAhB,AAAA+B,AAAA,AAA6CG;AAA7C,AAAAlC,AAAA+B,AAAA,AAAkDI;AAAlD,AACE,AAAAC,AAA0CF;AAA1CE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAC,AAAAqC,AAAAA;AAAA,AAAApC,AAAAoC,AAAA,AAAc9C;AAAd,AAAAU,AAAAoC,AAAA,AAAsBC;AAAtB,AAAArC,AAAAoC,AAAA,AAA+BE;AAA/B,AAEE,AAAM,AAAKC,AACA,AAAI,AAACC,AAAOF,AAAUG;AADjC,AAGE,AAAMC,AAAe,AAACC,AAA0BT,AAAKC;AAArD,AAEE,AAAM,AAAC3C,AAAIkD;AAAX,AACE,AAAA,AAAAE,AAACC,AAAyBZ,AAAQS;AAAlC,AAAkD,AAAAE,AAAC7B,AAAaC,AAAMU;;;AADxE;;;AALJ;;;AASJ,AAAA,AAAMoB,AAAanC;AAAnB,AACE,AAAI,AAAA,AAACoC,AAAiB;AAEpB,AAACC,AAAQrC;;AAGT,AAAsBA;;;AAE1B,AAAM,AAAKsC,AAAY,AAAA,AAAMC;AAA7B,AAEE,AAAA,AAAA,AAAA,AAAArD,AAAasD;;AAAb,AAAA,AAAA,AAAaA,AAEX,AAAWC,AAAKjE;AAAhB,AAAA,AAAA,AAAWiE;AAAX,AACE,AAACN,AAAY3D;;;AAHjB,AAAA,AAAA,AAAAU,AAAasD;;AAAb,AAAA,AAAA,AAAaA,AAMX,AAAAE,AAAYD;AAAZ,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzD,AAAA,AAAAyD,AAAA,AAAA,AAAA,AAAA,AAAAxD,AAAAC,AAAAuD,AAAAA;AAAAA,AAAiCC;AAAjC,AAAAvD,AAAAsD,AAAA,AAAyB3C;AAAzB,AAAA,AAAA,AAAYyC;AAAZ,AACE,AAACN,AAAYnC;;;AAPjB,AAAA,AAAA,AAAawC,AASX,AAAAK,AAAevB,AAA+B0B,AAAKC;AAAnD,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5D,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAA3D,AAAAC,AAAA0D,AAAAA;AAAA,AAAAzD,AAAAyD,AAAA,AAA+BC;AAA/B,AAAA,AAAA,AAAezB;AAAf,AACE,AAACY,AACCZ,AAEKyB,AACA,AAACG,AAAOC,AACR,AAAA,AAACC,AACN,AAAKzE;AAAL,AACE,AAACD,AAAWC;;AACZ,AAACqE,AAAAA,AAAAA;;;;AAlBT,AAAA,AAAA,AAAaR,AAoBX,AAAAa,AAAkB/B,AAAgE0B,AAAKC;AAAvF,AAAA,AAAAK,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApE,AAAA,AAAAoE,AAAA,AAAA,AAAA,AAAA,AAAAnE,AAAAC,AAAAkE,AAAAA;AAAAA,AAA6EjD;AAA7E,AAAAhB,AAAAiE,AAAA,AAAkC3E;AAAlC,AAAAU,AAAAiE,AAAA,AAA0CC;AAA1C,AAAAlE,AAAAiE,AAAA,AAA4DE;AAA5D,AAAA,AAAA,AAAkBlC;AAAlB,AACE,AAAMmC,AAEK,AAACP,AAAO,AAAAQ,AAGR,AAAA,AAACN;AAHO,AAAA,AAAAO,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzE,AAAA,AAAAyE,AAAA,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAAuE,AAAAA;AAAAA,AAA2B1D;AAA3B,AAAAZ,AAAAsE,AAAA,AAAaC;AAAb,AACE,AAAAC,AAAK,AAACV,AAAmBlD;AAAzB,AAAA,AAAA4D;AACK,AAACC,AAAI,AAACC,AAAKR,AAAkBK;;AADlCC;;AAFVlF;AADX,AAOE,AAAA,AAAAmF,AAAQ,AAACjF,AAAI4E;AACX,AAAAO,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChB,AAAAA,AAAAA;;AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACiB,AAAY3C,AAENiB,AACK,AAAA,AAACa,AAAQ,AAAA,AAACc,AAAkBT,AAGrC,AAAAU;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlF,AAAA,AAAAkF,AAAA,AAAA,AAAA,AAAA,AAAAjF,AAAAC,AAAAgF,AAAAA;AAAAA,AAA0B/D;AAA1B,AAAAhB,AAAA+E,AAAA,AAAazF;AAAb,AACE,AAAA,AACE,AAACD,AAAWC;;AACZ,AAACqE,AAAAA,AAAAA,AAAKS,AAAAA;AAFR,AAAAY,AAGkBC;AAHlB,AAII,AAACrB,AAAAA,AAAAA,AAAMqB,AAAAA;;;;;AAExB,AAAA,AAAA,AAACC,AACC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvF,AAAA,AAAAuF,AAAA,AAAA,AAAA,AAAA,AAAAtF,AAAAC,AAAAqF,AAAAA;AAAAA,AAA0BC;AAA1B,AAAArF,AAAAoF,AAAA,AAAanD;AAAb,AACE,AAAA,AAAA,AAAMqD,AAAcrD;AAApB,AACE,AAAA,AAAA,AAAA,AAACsD,AAAkBtD,AAEhB;AAAA,AAGE,AAACuD;;AACD,AAAC3E,AAAa,AAAA,AAAA,AAAU,AAAA,AAAA,AAAA,AAAA,AAAIoB,AAAmBwD;AANpD,AASG;AAAA,AACE,AAAA,AAACC;AAVN,AAAA,AAAA,AAcI,AAAK1E;AAAL,AACE,AAAC2E,AACC,AAAA,AAAA;AAhBR,AAoBI,AAAK3E;AAAL,AAAA;AApBJ,AAuBI,AAAKA;AAAL,AAEE,AAAC4E,AAAuB,AAAA,AAAA,AAACzE,AAAMH;AAzBrC,AA4BI,AAAKA;AAAL,AAEE,AAAMA,AAAI,AAAC6E,AAAyB7E;AAApC,AACE,AAACgB,AAAsBC,AAAQjB;;AAC/B,AAAC4E,AAAuB,AAAA,AAAA,AAACzE,AAAMH;AAhCvC,AAmCI,AAAKA;AAAL,AAEE,AAAC4E,AAAuB,AAAA,AAAA,AAACzE,AAAMH;AArCrC,AAwCI,AAAA8E;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlG,AAAA,AAAAkG,AAAA,AAAA,AAAA,AAAA,AAAAjG,AAAAC,AAAAgG,AAAAA;AAAA,AAAA/F,AAAA+F,AAAA,AAAaC;AAAb,AAAAhG,AAAA+F,AAAA,AAAsBE;AAAtB,AACE,AACE,AAAK,AAAA,AAACC,AAAqBF,AACtB,AAACE,AAAED,AAAU/C;AAClB,AAAA,AAACwC;;AAHH,AAQE,AAAA,AAACQ,AAAkBF;AACnB,AAAA,AAACN;;AATH;;;;;AAWNJ;AAEJ,AAAAa;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAAA,AAA0Bd;AAA1B,AAAAtF,AAAAoG,AAAA,AAAanE;AAAb,AACE,AAAA,AAACoE,AAAkBpE;;;AAEvB,AAAA,AAAA,AAAA,AAACqE,AAAgDC,AAASC,AAAQC;;AAzGpE","names":["var_args","G__29538","shadow.cljs.devtools.client.react-native/devtools-msg","js/Error","x","shadow.cljs.devtools.client.env/log","js/console.log","y","shadow.cljs.devtools.client.react-native/script-eval","code","js/goog.global.eval","shadow.cljs.devtools.client.react-native/do-js-load","sources","seq__29543","cljs.core/seq","chunk__29544","count__29545","i__29546","map__29556","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__29569","cljs.core/first","cljs.core/next","resource-name","js","src","shadow.cljs.devtools.client.react_native.devtools_msg","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.react-native/do-js-reload","msg","complete-fn","shadow.cljs.devtools.client.env.do_js_reload","cljs.core.assoc","fn-sym","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.react-native/noop","seq29581","self__4724__auto__","args","p__29583","map__29584","shadow.cljs.devtools.client.react-native/handle-build-complete","runtime","info","reload-info","map__29587","compiled","warnings","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","shadow.cljs.devtools.client.env/filter-reload-sources","p1__29582#","shadow.cljs.devtools.client.shared/load-sources","shadow.cljs.devtools.client.react-native/global-eval","cljs.core.not_EQ_","js/eval","shadow.cljs.devtools.client.env/enabled","shadow.cljs.devtools.client.env/worker-client-id","shadow.cljs.devtools.client.shared/Runtime","this","p__29598","map__29599","_","p__29606","map__29609","repl-sources","done","error","cljs.core.remove","shadow.cljs.devtools.client.env/src-is-loaded?","cljs.core.into","p__29615","map__29616","reload-namespaces","js-requires","sources-to-load","p__29618","map__29619","provides","and__4115__auto__","cljs.core/not","cljs.core/some","G__29621","shadow.remote.runtime.shared.call","cljs.core.map","p__29623","map__29624","e29626","ex","shadow.cljs.devtools.client.shared/add-plugin!","p__29629","map__29630","env","svc","shadow.remote.runtime.api/add-extension","shadow.cljs.devtools.client.env/patch-goog!","cljs.core/deref","js/console.warn","js/console.error","shadow.cljs.devtools.client.env/run-custom-notify!","shadow.cljs.devtools.client.env/add-warnings-to-info","p__29632","map__29634","event-op","client-id","cljs.core._EQ_","p__29636","map__29637","shadow.remote.runtime.api/del-extension","shadow.cljs.devtools.client.shared/init-runtime!","shadow.cljs.devtools.client.websocket/start","shadow.cljs.devtools.client.websocket/send","shadow.cljs.devtools.client.websocket/stop"],"sourcesContent":["(ns shadow.cljs.devtools.client.react-native\n  (:require\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.cljs.devtools.client.shared :as cljs-shared]\n    [shadow.cljs.devtools.client.websocket :as ws]))\n\n(defn devtools-msg\n  ([x]\n   (when env/log\n     (js/console.log x)))\n  ([x y]\n   (when env/log\n     (js/console.log x y))))\n\n(defn script-eval [code]\n  (js/goog.global.eval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-name js] :as src} sources]\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn noop [& args])\n\n(defn handle-build-complete [runtime {:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled warnings]} info]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n\n      (let [sources-to-get (env/filter-reload-sources info reload-info)]\n\n        (when (seq sources-to-get)\n          (cljs-shared/load-sources runtime sources-to-get #(do-js-reload msg % noop))\n          )))))\n\n(defn global-eval [js]\n  (if (not= \"undefined\" (js* \"typeof(module)\"))\n    ;; don't eval in the global scope in case of :npm-module builds running in webpack\n    (js/eval js)\n    ;; hack to force eval in global scope\n    ;; goog.globalEval doesn't have a return value so can't use that for REPL invokes\n    (js* \"(0,eval)(~{});\" js)))\n\n(when (and env/enabled (pos? env/worker-client-id))\n\n  (extend-type cljs-shared/Runtime\n    api/IEvalJS\n    (-js-eval [this code]\n      (global-eval code))\n\n    cljs-shared/IHostSpecific\n    (do-invoke [this {:keys [js] :as _}]\n      (global-eval js))\n\n    (do-repl-init [runtime {:keys [repl-sources]} done error]\n      (cljs-shared/load-sources\n        runtime\n        ;; maybe need to load some missing files to init REPL\n        (->> repl-sources\n             (remove env/src-is-loaded?)\n             (into []))\n        (fn [sources]\n          (do-js-load sources)\n          (done))))\n\n    (do-repl-require [runtime {:keys [sources reload-namespaces js-requires] :as msg} done error]\n      (let [sources-to-load\n            (->> sources\n                 (remove (fn [{:keys [provides] :as src}]\n                           (and (env/src-is-loaded? src)\n                                (not (some reload-namespaces provides)))))\n                 (into []))]\n\n        (if-not (seq sources-to-load)\n          (done [])\n          (shared/call runtime\n            {:op :cljs-load-sources\n             :to env/worker-client-id\n             :sources (into [] (map :resource-id) sources-to-load)}\n\n            {:cljs-sources\n             (fn [{:keys [sources] :as msg}]\n               (try\n                 (do-js-load sources)\n                 (done sources-to-load)\n                 (catch :default ex\n                   (error ex))))})))))\n\n  (cljs-shared/add-plugin! ::client #{}\n    (fn [{:keys [runtime] :as env}]\n      (let [svc {:runtime runtime}]\n        (api/add-extension runtime ::client\n          {:on-welcome\n           (fn []\n             ;; FIXME: why does this break stuff when done when the namespace is loaded?\n             ;; why does it have to wait until the websocket is connected?\n             (env/patch-goog!)\n             (devtools-msg (str \"#\"  (-> runtime :state-ref deref :client-id) \" ready!\")))\n\n           :on-disconnect\n           (fn []\n             (js/console.warn \"The shadow-cljs Websocket was disconnected.\"))\n\n           :ops\n           {:access-denied\n            (fn [msg]\n              (js/console.error\n                (str \"Stale Output! Your loaded JS was not produced by the running shadow-cljs instance.\"\n                     \" Is the watch for this build running?\")))\n\n            :cljs-build-configure\n            (fn [msg])\n\n            :cljs-build-start\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-start\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-start)))\n\n            :cljs-build-complete\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-complete\" msg)\n              (let [msg (env/add-warnings-to-info msg)]\n                (handle-build-complete runtime msg)\n                (env/run-custom-notify! (assoc msg :type :build-complete))))\n\n            :cljs-build-failure\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-failure\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-failure)))\n\n            ::env/worker-notify\n            (fn [{:keys [event-op client-id]}]\n              (cond\n                (and (= :client-disconnect event-op)\n                     (= client-id env/worker-client-id))\n                (js/console.warn \"The watch for this build was stopped!\")\n\n                ;; FIXME: what are the downside to just resuming on that worker?\n                ;; can't know if it changed something in the build\n                ;; all previous analyzer state is gone and might be out of sync with this instance\n                (= :client-connect event-op)\n                (js/console.warn \"The watch for this build was restarted. Reload required!\")\n                ))}})\n        svc))\n\n    (fn [{:keys [runtime] :as svc}]\n      (api/del-extension runtime ::client)))\n\n  (cljs-shared/init-runtime! {:host :react-native} ws/start ws/send ws/stop))"]}